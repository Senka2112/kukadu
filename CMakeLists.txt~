cmake_minimum_required(VERSION 2.8.3)
project(kukadu)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  geometry_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

#######################################
## Declare ROS messages and services ##
#######################################

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES kukadu
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS} src/kukadu_core/include /usr/local/include /usr/include $ENV{MOTION_CONTROL_HOME}/motion_control/motion_control_msgs/msg_gen/cpp/include
  $ENV{OROCOS_HOME}/kuka_robot_hardware/lwr_fri/include
  $ENV{OROCOS_HOME}/kuka_robot_hardware/lwr_fri/msg_gen/cpp/include
  $ENV{IIS_INCLUDE_PATH}/external_libs/RedundantKin/
  /opt/ros/groovy/stacks/rtt_common_msgs/rtt_geometry_msgs/include
)

set(kukadu_MSG_DEPENDENCIES geometry_msgs;std_msgs;std_srvs)

## Declare a cpp library
# add_library(kukadu
#   src/${PROJECT_NAME}/kukadu.cpp
# )

## Declare a cpp executable
# add_executable(kukadu_node src/kukadu_node.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(kukadu_node kukadu_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(kukadu_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS kukadu kukadu_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_kukadu.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

LINK_DIRECTORIES(/usr/local/lib)

add_definitions(-DOSNAME_LINUX=1)
add_definitions(-w)
add_definitions(-std=c++0x)
add_definitions(-fPIC)
add_definitions(-shared)
add_definitions(-pthread)
add_definitions(-DROS_SUPPORT)

add_library(kukadulib src/kukadu_core/src/robot/robotDriver/src/kuka/friRemote.cpp
src/kukadu_core/src/robot/robotDriver/src/kuka/friUdp.cpp
src/kukadu_core/src/robot/robotDriver/src/friMain.cpp
src/kukadu_core/src/robot/robotDriver/src/friMisc.cpp
src/kukadu_core/src/robot/KukaControlQueue.cpp
src/kukadu_core/src/utils/utils.cpp
src/kukadu_core/src/utils/conversion_utils.cpp
src/kukadu_core/src/utils/Tokenizer.cpp
src/kukadu_core/src/learning/GeneralFitter.cpp
src/kukadu_core/src/trajectory/DMPExecutor.cpp
src/kukadu_core/src/trajectory/TrajectoryGenerator.cpp
src/kukadu_core/src/trajectory/DMPTrajectoryGenerator.cpp
src/kukadu_core/src/trajectory/PolyTrajectoryGenerator.cpp
src/kukadu_core/src/trajectory/TrajectoryDMPLearner.cpp
src/kukadu_core/src/trajectory/DMPGeneralizer.cpp
src/kukadu_core/src/learning/GenericKernel.cpp
src/kukadu_core/src/learning/TricubeKernel.cpp
src/kukadu_core/src/learning/KernelRegressor.cpp src/kukadu_core/src/learning/GaussianProcessRegressor.cpp
src/kukadu_core/src/learning/LWRRegressor.cpp
src/kukadu_core/src/robot/mounted/sdhoptions.cpp
src/kukadu_core/src/utils/DestroyableObject.cpp
src/kukadu_core/src/robot/mounted/GenericHand.cpp
src/kukadu_core/src/robot/mounted/SchunkHand.cpp
src/kukadu_core/src/learning/QuadraticKernel.cpp
src/kukadu_core/src/learning/GaussianKernel.cpp
src/kukadu_core/src/learning/reinforcement_learning/GenDMPReinforcer.cpp
src/kukadu_core/src/utils/gnuplot-cpp/gnuplot_i.cpp
src/kukadu_core/src/robot/ControlQueue.cpp
src/kukadu_core/src/learning/reinforcement_learning/DMPReinforcer.cpp
src/kukadu_core/src/learning/reinforcement_learning/TerminalCostComputer.cpp
src/kukadu_core/src/robot/OrocosControlQueue.cpp
src/kukadu_core/src/trajectory/DictionaryGeneralizer.cpp
src/kukadu_core/src/trajectory/TrajectoryComparator.cpp
src/kukadu_core/src/trajectory/DMPTrajectoryComparator.cpp
src/kukadu_core/src/types/Trajectory.cpp
src/kukadu_core/src/types/SingleSampleTrajectory.cpp
src/kukadu_core/src/types/DMP.cpp
src/kukadu_core/src/types/QueryPoint.cpp
src/kukadu_core/src/types/DMPBase.cpp
src/kukadu_core/src/types/LinCombDmp.cpp
src/kukadu_core/src/types/DictionaryTrajectory.cpp
src/kukadu_core/src/learning/metric_learning/Mahalanobis.cpp
src/kukadu_core/src/learning/metric_learning/MahalanobisLearner.cpp
src/kukadu_core/src/learning/metric_learning/InfTheoMetricLearner.cpp
src/kukadu_core/src/learning/metric_learning/InfTheoConstraints.cpp
src/kukadu_core/src/learning/metric_learning/TogersonMetricLearner.cpp
src/kukadu_core/src/learning/reinforcement_learning/PoWER.cpp
src/kukadu_core/src/learning/reinforcement_learning/TrajectoryBasedReward.cpp
src/kukadu_core/src/learning/reinforcement_learning/SampleRewardComputer.cpp
src/kukadu_core/src/learning/reinforcement_learning/GaussianObstacleRewardComputer.cpp
src/kukadu_core/src/learning/reinforcement_learning/GeneralReinforcer.cpp
src/kukadu_core/src/trajectory/TrajectoryExecutor.cpp
src/kukadu_core/src/utils/CustomSet.cpp)

add_executable(kukadu src/kukadu_core/src/mainScrewOrocos.cpp)
target_link_libraries(kukadu kukadulib)
target_link_libraries(kukadu ${catkin_LIBRARIES} gsl gslcblas SDHLibrary-CPP stdc++ armadillo)
target_link_libraries(kukadu $ENV{IIS_INCLUDE_PATH}/external_libs/RedundantKin/libRedundantKin.a ${catkin_LIBRARIES})

#target_link_libraries(kukadulib ${catkin_LIBRARIES} gsl gslcblas SDHLibrary-CPP stdc++ armadillo)
#target_link_libraries(kukadulib $ENV{IIS_INCLUDE_PATH}/external_libs/RedundantKin/libRedundantKin.a ${catkin_LIBRARIES})

#add_executable(listener src/listener.cpp)
#target_link_libraries(listener ${catkin_LIBRARIES})
