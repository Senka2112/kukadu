#ifndef DMPGENERALIZER
#define DMPGENERALIZER


#include <string>
#include <vector>
#include <armadillo>

#include "../utils/types.h"
#include "../utils/utils.h"
#include "../trajectory/DMPTrajectoryGenerator.h"
#include "../trajectory/TrajectoryDMPLearner.h"
#include "../learning/GenericKernel.h"
#include "../learning/GaussianProcessRegressor.h"
#include "../learning/LWRRegressor.h"

using namespace std;
using namespace arma;

class DMPGeneralizer {
	
private:
	
	string baseFolder;
	vector<string> files;
	vector<string> queryFiles;
	vector<string> trajFiles;
	vector<t_querypoint> queryPoints;
	vec taus;
	vec axs;
	
	vector<t_querypoint> mapFiles(vector<string> queryFiles, vector<string> trajFiles, string prefix1, string prefix2);
	mat computeCovarianceMatrix(int level, GenericKernel* kernel, double beta);

public:

	DMPGeneralizer(string baseFolder, int degOfFreedom, vector<double> tmpmys, vector<double> tmpsigmas, double az, double bz);
	
	int getQueryPointCount();
	
	t_querypoint getQueryPointByIndex(int index);
	
	t_learned_dmp generalizeDmp(GenericKernel* trajectoryKernel, GenericKernel* parameterKernel, vec query, double beta);
    
};

#endif