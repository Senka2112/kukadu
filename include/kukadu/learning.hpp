#include <kukadu/learning/clustering/kmeans.hpp>
#include <kukadu/learning/metric_learning/inftheoconstraints.hpp>
#include <kukadu/learning/metric_learning/inftheometriclearner.hpp>
#include <kukadu/learning/metric_learning/mahalanobicslearner.hpp>
#include <kukadu/learning/metric_learning/mahalanobis.hpp>
#include <kukadu/learning/metric_learning/togersonmetriclearner.hpp>
#ifndef USEBOOST
#include <kukadu/learning/projective_simulation/core/actionclip.hpp>
#include <kukadu/learning/projective_simulation/core/clip.hpp>
#include <kukadu/learning/projective_simulation/core/perceptclip.hpp>
#include <kukadu/learning/projective_simulation/core/projectivesimulator.hpp>
#include <kukadu/learning/projective_simulation/core/psevaluator.hpp>
#include <kukadu/learning/projective_simulation/core/reward.hpp>
#endif
#include <kukadu/learning/regression/gaussiankernel.hpp>
#include <kukadu/learning/regression/gaussianprocessregressor.hpp>
#include <kukadu/learning/regression/generalfitter.hpp>
#include <kukadu/learning/regression/generickernel.hpp>
#include <kukadu/learning/regression/kernelregressor.hpp>
#include <kukadu/learning/regression/lwrregressor.hpp>
#include <kukadu/learning/regression/quadratickernel.hpp>
#include <kukadu/learning/regression/tricubekernel.hpp>
#include <kukadu/learning/rl/costcomputer.hpp>
#include <kukadu/learning/rl/dmpreinforcer.hpp>
#include <kukadu/learning/rl/dmprewardcomputer.hpp>
#include <kukadu/learning/rl/generalreinforcer.hpp>
#include <kukadu/learning/rl/gradientdescent.hpp>
#include <kukadu/learning/rl/power.hpp>
#include <kukadu/learning/rl/samplerewardcomputer.hpp>
#include <kukadu/learning/rl/terminalcostcomputer.hpp>
#include <kukadu/learning/rl/trajectorybasedreward.hpp>
